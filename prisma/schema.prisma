// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SyncStatus {
  NOT_SYNCED
  SYNCING
  SYNCED
}

enum ExchangeName {
  COINBASEPRO
  BITSTAMP
  KRAKEN
}

enum OrderType {
  LIMIT
  MARKET
}

enum SideType {
  BUY
  SELL
  REWARD
  DEPOSIT
  WITHDRAWAL
}

enum TaxEventType {
  LOSS
  GAIN
  EVEN
}

enum TaxStrategy {
  FirstInFirstOut
  FirstInLastOut
  LastInFirstOut
  PrioritizeLongTerm
}

model Exchange {
  id           Int           @id @default(autoincrement())
  name         ExchangeName  @default(COINBASEPRO)
  apiKey       String        @unique
  apiSecret    String        @unique
  salt         String        @default("")
  apiThird     String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastSyncAt   DateTime?
  syncStatus   SyncStatus    @default(NOT_SYNCED)
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  lastOffset   Float?
  transactions Transaction[]
}

model PortfolioAsset {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  coin             String
  amount           Float
  averagePrice     Float
  totalInvested    Float      @default(0)
  holdings         Holding[]
  taxEvents        TaxEvent[]
  portfolio        Portfolio  @relation(fields: [portfolioId], references: [id])
  portfolioId      Int
  realizedPnLShort Float      @default(0)
  realizedPnLLong  Float      @default(0)
}

model Holding {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  tradedAt         DateTime
  coin             String
  amount           Float
  purchasePrice    Float
  fees             Float          @default(0)
  side             SideType       @default(BUY)
  isManuallyAdded  Boolean        @default(false)
  portfolioAsset   PortfolioAsset @relation(fields: [portfolioAssetId], references: [id])
  portfolioAssetId Int
}

model TaxEvent {
  id               Int            @id @default(autoincrement())
  portfolioAsset   PortfolioAsset @relation(fields: [portfolioAssetId], references: [id])
  portfolioAssetId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  taxedAt          DateTime
  coin             String
  type             TaxEventType
  amount           Float
  salePrice        Float
  totalValue       Float
  spnl             Float          @default(0)
  lpnl             Float          @default(0)
  transactionId    Int
  Transaction      Transaction[]
}

model Portfolio {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastSyncAt      DateTime?
  syncStatus      SyncStatus       @default(NOT_SYNCED)
  user            User             @relation(fields: [userId], references: [id])
  userId          Int
  portfolioAssets PortfolioAsset[]
}

model Transaction {
  id              Int         @id @default(autoincrement())
  exchange        Exchange    @relation(fields: [exchangeId], references: [id])
  exchangeId      Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  openedAt        DateTime
  doneAt          DateTime
  coin            String
  coinName        String?
  purchasePrice   Float
  amount          Float
  fees            Float       @default(0)
  type            OrderType
  post            Boolean
  settled         Boolean
  filled          Boolean
  side            SideType    @default(BUY)
  isManuallyAdded Boolean     @default(false)
  taxEvent        TaxEvent?   @relation(fields: [taxEventId], references: [id])
  taxStrategy     TaxStrategy @default(PrioritizeLongTerm)
  taxEventId      Int?
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  password  String
  salt      String     @default("")
  exchanges Exchange[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  portfolio Portfolio?
}
